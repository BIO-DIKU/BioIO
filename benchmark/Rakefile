task default: 'all'

task all: %i(bioio seqtk kseq long short bm_seqtk bm_python bm_kseq plot)

# Method to time a given code block and write the result to a given file.
#
# @param file [String] Path to file with time result.
# @param block [Proc] Code to execute
def time(file, &block)
  fail unless block

  t1 = Time.now
  block.call
  t2 = Time.now

  File.open(file, 'w') do |ios|
    ios.puts t2 - t1
  end
end

desc 'Build bioio'
task :bioio do
  unless File.exist? 'bioio'
    sh %(g++ -std=c++11 -I ../include/ bioio.cc ../libBioIO.a -o bioio)
  end
end

desc 'Download and install seqtk'
task :seqtk do
  unless File.directory? 'seqtk'
    sh %(git clone https://github.com/lh3/seqtk.git)
    sh %(cd seqtk && make)
  end
end

desc 'Download and install kseq'
task :kseq do
  unless File.directory? 'kseq'
    Dir.mkdir 'kseq'
    Dir.chdir 'kseq'
    sh %(wget http://lh3lh3.users.sourceforge.net/download/kseq.tar.bz2)
    sh %(tar -jxvf kseq.tar.bz2)
    sh %(make)
    Dir.chdir '..'
  end
end

desc 'Create data file with long sequences'
task :long do
  unless File.exist? 'long.fna'
    File.open('long.fna', 'w') do |ios|
      seq = ('A' * 200_000_000).gsub(/(.{10})/, '\\1 ').gsub(/(.{80})/, "\\1\n")
      20.times { |i| ios.puts ">seq_#{i}", seq }
    end
  end
end

desc 'Create data file with short sequences'
task :short do
  unless File.exist? 'short.fna'
    File.open('short.fna', 'w') do |ios|
      seq = ('A' * 200).gsub(/(.{10})/, '\\1 ').gsub(/(.{80})/, "\\1\n")
      20_000_000.times { |i| ios.puts ">seq_#{i}", seq }
    end
  end
end

desc 'Benchmark bioio'
task :bm_seqtk do
  unless File.exist? 'bioio_short.txt'
    time('bioio_short.txt') do
      sh %(./bioio short.fna > /dev/null)
    end
  end

  unless File.exist? 'bioio_long.txt'
    time('bioio_long.txt') do
      sh %(./bioio long.fna > /dev/null)
    end
  end
end

desc 'Benchmark seqtk'
task :bm_seqtk do
  unless File.exist? 'seqtk_short.txt'
    time('seqtk_short.txt') do
      sh %(seqtk/seqtk seq short.fna > /dev/null)
    end
  end

  unless File.exist? 'seqtk_long.txt'
    time('seqtk_long.txt') do
      sh %(seqtk/seqtk seq long.fna > /dev/null)
    end
  end
end

desc 'Benchmark kseq'
task :bm_kseq do
  unless File.exist? 'kseq_short.txt'
    time('kseq_short.txt') do
      sh %(kseq/kseq_test short.fna > /dev/null)
    end
  end

  unless File.exist? 'kseq_long.txt'
    time('kseq_long.txt') do
      sh %(kseq/kseq_test long.fna > /dev/null)
    end
  end
end

desc 'Benchmark Python'
task :bm_python do
  unless File.exist? 'python_short.txt'
    time('python_short.txt') do
      sh %(python bioio.py short.fna > /dev/null)
    end
  end

  unless File.exist? 'python_long.txt'
    time('python_long.txt') do
      sh %(python bioio.py long.fna > /dev/null)
    end
  end
end

desc 'Create benchmark plot'
task :plot do
  unless File.exist? 'benchmark.png'
    File.open('benchmark.dat', 'w') do |out|
      out.puts 'File BioIO seqtk kseq Python'
      out.puts [
        'Short',
        File.read('bioio_short.txt').chomp,
        File.read('seqtk_short.txt').chomp,
        File.read('kseq_short.txt').chomp,
        File.read('python_short.txt').chomp
      ].join(' ')
      out.puts [
        'Long',
        File.read('bioio_long.txt').chomp,
        File.read('seqtk_long.txt').chomp,
        File.read('kseq_long.txt').chomp,
        File.read('python_long.txt').chomp
      ].join(' ')
    end

    sh %(gnuplot plot_benchmark.gp)
  end
end

desc 'Cleanup files and directories'
task :clean do
  sh %(rm -rf bioio seqtk kseq *.fna *.txt *.dat *.png)
end
